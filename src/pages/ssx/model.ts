export type SSXDataCollectionResponse = {
  ssxDataCollectionId: number;
  ssxSpecimenId: number;
  repetitionRate: number;
  energyBandwidth: number;
  monoStripe: string;
  DataCollection: DataCollectionResponse;
};

export type DataCollectionResponse = {
  dataCollectionGroupId: number;
  strategySubWedgeOrigId: number;
  detectorId: number;
  blSubSampleId: number;
  startPositionId: number;
  endPositionId: number;
  dataCollectionNumber: number;
  startTime: string;
  endTime: string;
  runStatus: string;
  axisStart: number;
  axisEnd: number;
  axisRange: number;
  overlap: number;
  numberOfImages: number;
  startImageNumber: number;
  numberOfPasses: number;
  exposureTime: number;
  imageDirectory: string;
  imagePrefix: string;
  imageSuffix: string;
  imageContainerSubPath: string;
  fileTemplate: string;
  wavelength: number;
  resolution: number;
  detectorDistance: number;
  xBeam: number;
  yBeam: number;
  xBeamPix: number;
  yBeamPix: number;
  comments: string;
  printableForReport: number;
  slitGapVertical: number;
  slitGapHorizontal: number;
  transmission: number;
  synchrotronMode: string;
  xtalSnapshotFullPath1: string;
  xtalSnapshotFullPath2: string;
  xtalSnapshotFullPath3: string;
  xtalSnapshotFullPath4: string;
  rotationAxis: string;
  phiStart: number;
  kappaStart: number;
  omegaStart: number;
  resolutionAtCorner: number;
  detector2Theta: number;
  undulatorGap1: number;
  undulatorGap2: number;
  undulatorGap3: number;
  beamSizeAtSampleX: number;
  beamSizeAtSampleY: number;
  centeringMethod: string;
  averageTemperature: number;
  actualCenteringPosition: string;
  beamShape: string;
  flux: number;
  flux_end: number;
  totalAbsorbedDose: number;
  bestWilsonPlotPath: string;
  imageQualityIndicatorsPlotPath: string;
  imageQualityIndicatorsCSVPath: string;
  blSampleId: number;
  sessionId: number;
  experimentType: string;
  crystalClass: string;
  chiStart: number;
  detectorMode: string;
  actualSampleBarcode: string;
  actualSampleSlotInContainer: number;
  actualContainerBarcode: string;
  actualContainerSlotInSC: number;
  positionId: number;
  focalSpotSizeAtSampleX: number;
  polarisation: number;
  focalSpotSizeAtSampleY: number;
  apertureId: number;
  screeningOrigId: number;
  processedDataFile: string;
  datFullPath: string;
  magnification: number;
  binning: number;
  particleDiameter: number;
  boxSize_CTF: number;
  minResolution: number;
  minDefocus: number;
  maxDefocus: number;
  defocusStepSize: number;
  amountAstigmatism: number;
  extractSize: number;
  bgRadius: number;
  voltage: number;
  objAperture: number;
  c1aperture: number;
  c2aperture: number;
  c3aperture: number;
  c1lens: number;
  c2lens: number;
  c3lens: number;
  DataCollectionGroup: DataCollectionGroupResponse;
  Detector?: DetectorResponse;
};

export type DataCollectionGroupResponse = {
  dataCollectionGroupId: number;
  blSampleId: number;
  sessionId: number;
  workflowId: number;
  experimentType: string;
  startTime: string;
  endTime: string;
  crystalClass: string;
  comments: string;
  detectorMode: string;
  actualSampleBarcode: string;
  actualSampleSlotInContainer: number;
  actualContainerBarcode: string;
  actualContainerSlotInSC: number;
  xtalSnapshotFullPath: string;
};

export type DetectorResponse = {
  detectorId: number;
  detectorType: string;
  detectorManufacturer: string;
  detectorModel: string;
  detectorPixelSizeHorizontal: number;
  detectorPixelSizeVertical: number;
  detectorSerialNumber: string;
  detectorDistanceMin: number;
  detectorDistanceMax: number;
  trustedPixelValueRangeLower: number;
  trustedPixelValueRangeUpper: number;
  sensorThickness: number;
  overload: number;
  XGeoCorr: string;
  YGeoCorr: string;
  detectorMode: string;
  detectorMaxResolution: number;
  detectorMinResolution: number;
  CS: number;
  density: number;
  composition: string;
  localName: string;
};

export type SSXSpecimenResponse = {
  ssxSpecimenId: number;
  specimenId: number;
  avgXtalSize: number;
  ligandConcentration: number;
  sampleSupport: string;
  jetMaterial: string;
  Specimen: SpecimenResponse;
};

export type SpecimenResponse = {
  specimenId: number;
  experimentId: number;
  bufferId: number;
  macromoleculeId: number;
  samplePlatePositionId: number;
  safetyLevelId: number;
  stockSolutionId: number;
  code: string;
  concentration: string;
  volume: string;
  comments: string;
  Macromolecule: MacromoleculeResponse;
  Buffer: BufferResponse;
  Experiment: ExperimentResponse;
  Structures: StructureResponse[];
};

export type StructureResponse = {
  structureId: number;
  macromoleculeId: number;
  crystalId: number;
  blSampleId: number;
  filePath: string;
  structureType: string;
  fromResiduesBases: string;
  toResiduesBases: string;
  sequence: string;
  creationDate: string;
  name: string;
  symmetry: string;
  multiplicity: string;
  groupName: string;
  proposalId: number;
  uniprotId: string;
};

export type MacromoleculeResponse = {
  macromoleculeId: number;
  proposalId: number;
  safetyLevelId: number;
  name: string;
  acronym: string;
  extintionCoefficient: string;
  molecularMass: string;
  sequence: string;
  contactsDescriptionFilePath: string;
  symmetry: string;
  comments: string;
  refractiveIndex: string;
  solventViscosity: string;
  creationDate: string;
  electronDensity: number;
};
export type BufferResponse = {
  bufferId: number;
  proposalId: number;
  safetyLevelId: number;
  name: string;
  acronym: string;
  pH: string;
  composition: string;
  comments: string;
  BLSessionId: number;
  electronDensity: number;
};
export type ExperimentResponse = {
  experimentId: number;
  sessionId: number;
  proposalId: number;
  name: string;
  creationDate: string;
  experimentType: string;
  sourceFilePath: string;
  dataAcquisitionFilePath: string;
  status: string;
  comments: string;
};
