/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Xrffluorescencemappingid = number;
export type Colourmap = string;
export type Points = number;
export type Dataformat = string;
/**
 * Url to map image
 */
export type Url = string;
export type Gridinfoid = number;
export type StepsX = number;
export type StepsY = number;
export type Snaked = boolean;
export type Orientation = string;
export type Xrffluorescencemappingroiid = number;
export type Element = string;
export type Edge = string;
export type Scalar = string;
export type Startenergy = number;
export type Endenergy = number;

export interface Map {
  xrfFluorescenceMappingId: Xrffluorescencemappingid;
  colourMap?: Colourmap;
  points?: Points;
  dataFormat: Dataformat;
  _metadata: MapMetaData;
  GridInfo: MapGridInfo;
  XRFFluorescenceMappingROI: MapROI;
}
export interface MapMetaData {
  url: Url;
}
export interface MapGridInfo {
  gridInfoId: Gridinfoid;
  steps_x: StepsX;
  steps_y: StepsY;
  snaked: Snaked;
  orientation: Orientation;
}
export interface MapROI {
  xrfFluorescenceMappingROIId: Xrffluorescencemappingroiid;
  element?: Element;
  edge?: Edge;
  scalar?: Scalar;
  startEnergy: Startenergy;
  endEnergy: Endenergy;
}

type Constructor<T = {}> = new (...args: any[]) => T;
export function withMap<TBase extends Constructor>(Base: TBase) {
  return class WithMap extends Base {
    xrfFluorescenceMappingId: Xrffluorescencemappingid;
    colourMap?: Colourmap;
    points?: Points;
    dataFormat: Dataformat;
    _metadata: MapMetaData;
    GridInfo: MapGridInfo;
    XRFFluorescenceMappingROI: MapROI;
  }
}
export function withMapMetaData<TBase extends Constructor>(Base: TBase) {
  return class WithMapMetaData extends Base {
    url: Url;
  }
}
export function withMapGridInfo<TBase extends Constructor>(Base: TBase) {
  return class WithMapGridInfo extends Base {
    gridInfoId: Gridinfoid;
    steps_x: StepsX;
    steps_y: StepsY;
    snaked: Snaked;
    orientation: Orientation;
  }
}
export function withMapROI<TBase extends Constructor>(Base: TBase) {
  return class WithMapROI extends Base {
    xrfFluorescenceMappingROIId: Xrffluorescencemappingroiid;
    element?: Element;
    edge?: Edge;
    scalar?: Scalar;
    startEnergy: Startenergy;
    endEnergy: Endenergy;
  }
}
