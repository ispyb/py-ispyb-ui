/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Containerqueuesampleid = number;
export type Datacollectionplanid = number;
export type Blsubsampleid = number;
export type Blsampleid = number;
export type Name = string;
export type Type = string;
export type Diffractionplanid = number;
export type Recordtimestamp = string;
export type Datacollectionid = number;
export type Runstatus = string;
/**
 * Related data collections
 */
export type Datacollections = ContainerQueueDataCollection[];
/**
 * Related dataCollectionGroupId
 */
export type Datacollectiongroupid = number;
/**
 * Related sessionId
 */
export type Sessionid = number;
/**
 * Related proposal
 */
export type Proposal = string;
/**
 * Time first datacollection started
 */
export type Started = string;
/**
 * Time last datacollection ended
 */
export type Finished = string;
/**
 * Types of data collections
 */
export type Types = string[];

export interface ContainerQueueSample {
  containerQueueSampleId: Containerqueuesampleid;
  dataCollectionPlanId: Datacollectionplanid;
  blSubSampleId?: Blsubsampleid;
  BLSample?: ContainerQueueBLSample;
  BLSubSample?: ContainerQueueBLSubSample;
  DiffractionPlan?: ContainerQueueDiffractionPlan;
  _metadata: ContainerQueueSampleMetaData;
}
export interface ContainerQueueBLSample {
  blSampleId: Blsampleid;
  name: Name;
}
export interface ContainerQueueBLSubSample {
  type: Type;
  BLSample: ContainerQueueBLSample;
}
export interface ContainerQueueDiffractionPlan {
  diffractionPlanId: Diffractionplanid;
  recordTimeStamp: Recordtimestamp;
  scanParameters?: Scanparameters;
}
export interface Scanparameters {
}
export interface ContainerQueueSampleMetaData {
  datacollections: Datacollections;
  dataCollectionGroupId?: Datacollectiongroupid;
  sessionId?: Sessionid;
  proposal?: Proposal;
  started?: Started;
  finished?: Finished;
  types?: Types;
}
export interface ContainerQueueDataCollection {
  dataCollectionId: Datacollectionid;
  runStatus?: Runstatus;
}

type Constructor<T = {}> = new (...args: any[]) => T;
export function withContainerQueueSample<TBase extends Constructor>(Base: TBase) {
  return class WithContainerQueueSample extends Base {
    containerQueueSampleId: Containerqueuesampleid;
    dataCollectionPlanId: Datacollectionplanid;
    blSubSampleId?: Blsubsampleid;
    BLSample?: ContainerQueueBLSample;
    BLSubSample?: ContainerQueueBLSubSample;
    DiffractionPlan?: ContainerQueueDiffractionPlan;
    _metadata: ContainerQueueSampleMetaData;
  }
}
export function withContainerQueueBLSample<TBase extends Constructor>(Base: TBase) {
  return class WithContainerQueueBLSample extends Base {
    blSampleId: Blsampleid;
    name: Name;
  }
}
export function withContainerQueueBLSubSample<TBase extends Constructor>(Base: TBase) {
  return class WithContainerQueueBLSubSample extends Base {
    type: Type;
    BLSample: ContainerQueueBLSample;
  }
}
export function withContainerQueueDiffractionPlan<TBase extends Constructor>(Base: TBase) {
  return class WithContainerQueueDiffractionPlan extends Base {
    diffractionPlanId: Diffractionplanid;
    recordTimeStamp: Recordtimestamp;
    scanParameters?: Scanparameters;
  }
}
export function withScanparameters<TBase extends Constructor>(Base: TBase) {
  return class WithScanparameters extends Base {
  }
}
export function withContainerQueueSampleMetaData<TBase extends Constructor>(Base: TBase) {
  return class WithContainerQueueSampleMetaData extends Base {
    datacollections: Datacollections;
    dataCollectionGroupId?: Datacollectiongroupid;
    sessionId?: Sessionid;
    proposal?: Proposal;
    started?: Started;
    finished?: Finished;
    types?: Types;
  }
}
export function withContainerQueueDataCollection<TBase extends Constructor>(Base: TBase) {
  return class WithContainerQueueDataCollection extends Base {
    dataCollectionId: Datacollectionid;
    runStatus?: Runstatus;
  }
}
