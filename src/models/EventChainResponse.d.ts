/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Eventchainid = number;
export type Datacollectionid = number;
export type Name = string;
export type Eventid = number;
export type Eventchainid1 = number;
export type Componentid = number;
export type Eventtypeid = number;
export type Name1 = string;
export type Offset = number;
export type Duration = number;
export type Period = number;
export type Repetition = number;
export type Eventtypeid1 = number;
export type Name2 = string;
export type Events = EventResponse[];

export interface EventChainResponse {
  eventChainId: Eventchainid;
  dataCollectionId: Datacollectionid;
  name?: Name;
  events: Events;
}
export interface EventResponse {
  eventId: Eventid;
  eventChainId: Eventchainid1;
  componentId?: Componentid;
  eventTypeId: Eventtypeid;
  name?: Name1;
  offset: Offset;
  duration?: Duration;
  period?: Period;
  repetition?: Repetition;
  EventType: EventType;
}
export interface EventType {
  eventTypeId: Eventtypeid1;
  name: Name2;
}

type Constructor<T = {}> = new (...args: any[]) => T;
export function withEventChainResponse<TBase extends Constructor>(Base: TBase) {
  return class WithEventChainResponse extends Base {
    eventChainId: Eventchainid;
    dataCollectionId: Datacollectionid;
    name?: Name;
    events: Events;
  }
}
export function withEventResponse<TBase extends Constructor>(Base: TBase) {
  return class WithEventResponse extends Base {
    eventId: Eventid;
    eventChainId: Eventchainid1;
    componentId?: Componentid;
    eventTypeId: Eventtypeid;
    name?: Name1;
    offset: Offset;
    duration?: Duration;
    period?: Period;
    repetition?: Repetition;
    EventType: EventType;
  }
}
export function withEventType<TBase extends Constructor>(Base: TBase) {
  return class WithEventType extends Base {
    eventTypeId: Eventtypeid1;
    name: Name2;
  }
}
