/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Screeningid = number;
export type Programversion = string;
export type Comments = string;
export type Shortcomments = string;
export type Screeningoutputid = number;
export type Indexingsuccess = number;
export type Strategysuccess = number;
export type Screeningstrategyid = number;
export type Rankingresolution = number;
export type Screeningstrategywedgeid = number;
export type Wedgenumber = number;
export type Resolution = number;
export type Completeness = number;
export type Multiplicity = number;
export type Dosetotal = number;
export type Numberofimages = number;
export type Phi = number;
export type Kappa = number;
export type Chi = number;
export type Comments1 = string;
export type Wavelength = number;
export type Screeningstrategysubwedgeid = number;
export type Subwedgenumber = number;
export type Rotationaxis = string;
export type Axisstart = number;
export type Axisend = number;
export type Exposuretime = number;
export type Transmission = number;
export type Oscillationrange = number;
export type Completeness1 = number;
export type Multiplicity1 = number;
export type Resolution1 = number;
export type Dosetotal1 = number;
export type Numberofimages1 = number;
export type Comments2 = string;
export type Screeningstrategysubwedge = ScreeningStrategySubWedge[];
export type Screeningstrategywedge = ScreeningStrategyWedge[];
export type Screeningstrategy = ScreeningStrategy[];
export type UnitcellA = number;
export type UnitcellB = number;
export type UnitcellC = number;
export type UnitcellAlpha = number;
export type UnitcellBeta = number;
export type UnitcellGamma = number;
export type Spacegroup = string;
export type Pointgroup = string;
export type Screeningoutputlattice = ScreeningOutputLattice[];
export type Screeningoutput = ScreeningOutput[];

export interface Screening {
  screeningId: Screeningid;
  programVersion: Programversion;
  comments?: Comments;
  shortComments?: Shortcomments;
  ScreeningOutput?: Screeningoutput;
}
export interface ScreeningOutput {
  screeningOutputId: Screeningoutputid;
  indexingSuccess: Indexingsuccess;
  strategySuccess: Strategysuccess;
  ScreeningStrategy?: Screeningstrategy;
  ScreeningOutputLattice?: Screeningoutputlattice;
}
export interface ScreeningStrategy {
  screeningStrategyId: Screeningstrategyid;
  rankingResolution?: Rankingresolution;
  ScreeningStrategyWedge?: Screeningstrategywedge;
}
export interface ScreeningStrategyWedge {
  screeningStrategyWedgeId: Screeningstrategywedgeid;
  wedgeNumber?: Wedgenumber;
  resolution?: Resolution;
  completeness?: Completeness;
  multiplicity?: Multiplicity;
  doseTotal?: Dosetotal;
  numberOfImages?: Numberofimages;
  phi?: Phi;
  kappa?: Kappa;
  chi?: Chi;
  comments?: Comments1;
  wavelength?: Wavelength;
  ScreeningStrategySubWedge?: Screeningstrategysubwedge;
}
export interface ScreeningStrategySubWedge {
  screeningStrategySubWedgeId: Screeningstrategysubwedgeid;
  subWedgeNumber?: Subwedgenumber;
  rotationAxis?: Rotationaxis;
  axisStart?: Axisstart;
  axisEnd?: Axisend;
  exposureTime?: Exposuretime;
  transmission?: Transmission;
  oscillationRange?: Oscillationrange;
  completeness?: Completeness1;
  multiplicity?: Multiplicity1;
  RESOLUTION?: Resolution1;
  doseTotal?: Dosetotal1;
  numberOfImages?: Numberofimages1;
  comments?: Comments2;
}
export interface ScreeningOutputLattice {
  unitCell_a: UnitcellA;
  unitCell_b: UnitcellB;
  unitCell_c: UnitcellC;
  unitCell_alpha: UnitcellAlpha;
  unitCell_beta: UnitcellBeta;
  unitCell_gamma: UnitcellGamma;
  spaceGroup?: Spacegroup;
  pointGroup?: Pointgroup;
}

type Constructor<T = {}> = new (...args: any[]) => T;
export function withScreening<TBase extends Constructor>(Base: TBase) {
  return class WithScreening extends Base {
    screeningId: Screeningid;
    programVersion: Programversion;
    comments?: Comments;
    shortComments?: Shortcomments;
    ScreeningOutput?: Screeningoutput;
  }
}
export function withScreeningOutput<TBase extends Constructor>(Base: TBase) {
  return class WithScreeningOutput extends Base {
    screeningOutputId: Screeningoutputid;
    indexingSuccess: Indexingsuccess;
    strategySuccess: Strategysuccess;
    ScreeningStrategy?: Screeningstrategy;
    ScreeningOutputLattice?: Screeningoutputlattice;
  }
}
export function withScreeningStrategy<TBase extends Constructor>(Base: TBase) {
  return class WithScreeningStrategy extends Base {
    screeningStrategyId: Screeningstrategyid;
    rankingResolution?: Rankingresolution;
    ScreeningStrategyWedge?: Screeningstrategywedge;
  }
}
export function withScreeningStrategyWedge<TBase extends Constructor>(Base: TBase) {
  return class WithScreeningStrategyWedge extends Base {
    screeningStrategyWedgeId: Screeningstrategywedgeid;
    wedgeNumber?: Wedgenumber;
    resolution?: Resolution;
    completeness?: Completeness;
    multiplicity?: Multiplicity;
    doseTotal?: Dosetotal;
    numberOfImages?: Numberofimages;
    phi?: Phi;
    kappa?: Kappa;
    chi?: Chi;
    comments?: Comments1;
    wavelength?: Wavelength;
    ScreeningStrategySubWedge?: Screeningstrategysubwedge;
  }
}
export function withScreeningStrategySubWedge<TBase extends Constructor>(Base: TBase) {
  return class WithScreeningStrategySubWedge extends Base {
    screeningStrategySubWedgeId: Screeningstrategysubwedgeid;
    subWedgeNumber?: Subwedgenumber;
    rotationAxis?: Rotationaxis;
    axisStart?: Axisstart;
    axisEnd?: Axisend;
    exposureTime?: Exposuretime;
    transmission?: Transmission;
    oscillationRange?: Oscillationrange;
    completeness?: Completeness1;
    multiplicity?: Multiplicity1;
    RESOLUTION?: Resolution1;
    doseTotal?: Dosetotal1;
    numberOfImages?: Numberofimages1;
    comments?: Comments2;
  }
}
export function withScreeningOutputLattice<TBase extends Constructor>(Base: TBase) {
  return class WithScreeningOutputLattice extends Base {
    unitCell_a: UnitcellA;
    unitCell_b: UnitcellB;
    unitCell_c: UnitcellC;
    unitCell_alpha: UnitcellAlpha;
    unitCell_beta: UnitcellBeta;
    unitCell_gamma: UnitcellGamma;
    spaceGroup?: Spacegroup;
    pointGroup?: Pointgroup;
  }
}
