import { Entity } from '@rest-hooks/rest';
import { SingletonEntity } from 'api/resources/Base/Singleton';

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type TheAverageTimes = TimeEntry;
export type TotalTime = number;
export type TimeBeforeFirstDataCollection = number;
export type TimeUsedForDataCollections = number;
export type TimeUsedForEnergyScans = number;
export type TotalUsedForXrfScans = number;
export type TotalUsedForRobotSampleActions = number;
export type TimeWaitingForStrategy = number;
export type TotalWaitingForCentring = number;
export type TimeTakenWithFaults = number;
export type TimeRemaining = number;
export type TimeNotUsedByOtherTypes = number;
export type TotalTime1 = number;
export type TimeBeforeFirstDataCollection1 = number;
export type TimeUsedForDataCollections1 = number;
export type TimeUsedForEnergyScans1 = number;
export type TotalUsedForXrfScans1 = number;
export type TotalUsedForRobotSampleActions1 = number;
export type TimeWaitingForStrategy1 = number;
export type TotalWaitingForCentring1 = number;
export type TimeTakenWithFaults1 = number;
export type TimeRemaining1 = number;
export type TimeNotUsedByOtherTypes1 = number;
export type TheSessionId = number;
export type TimesPerSession = SessionTimeEntry[];

export interface Times {
  average: TheAverageTimes;
  sessions: TimesPerSession;
}
export interface TimeEntry {
  duration?: TotalTime;
  startup?: TimeBeforeFirstDataCollection;
  datacollection?: TimeUsedForDataCollections;
  edge?: TimeUsedForEnergyScans;
  xrf?: TotalUsedForXrfScans;
  robot?: TotalUsedForRobotSampleActions;
  strategy?: TimeWaitingForStrategy;
  centring?: TotalWaitingForCentring;
  fault?: TimeTakenWithFaults;
  remaining?: TimeRemaining;
  thinking?: TimeNotUsedByOtherTypes;
}
export interface SessionTimeEntry {
  duration?: TotalTime1;
  startup?: TimeBeforeFirstDataCollection1;
  datacollection?: TimeUsedForDataCollections1;
  edge?: TimeUsedForEnergyScans1;
  xrf?: TotalUsedForXrfScans1;
  robot?: TotalUsedForRobotSampleActions1;
  strategy?: TimeWaitingForStrategy1;
  centring?: TotalWaitingForCentring1;
  fault?: TimeTakenWithFaults1;
  remaining?: TimeRemaining1;
  thinking?: TimeNotUsedByOtherTypes1;
  sessionId: TheSessionId;
}


export abstract class TimesBase extends Entity {
  average: TheAverageTimes;
  sessions: TimesPerSession;
}

export abstract class TimesSingletonBase extends SingletonEntity {
  average: TheAverageTimes;
  sessions: TimesPerSession;
}

export abstract class TimeEntryBase extends Entity {
  duration?: TotalTime;
  startup?: TimeBeforeFirstDataCollection;
  datacollection?: TimeUsedForDataCollections;
  edge?: TimeUsedForEnergyScans;
  xrf?: TotalUsedForXrfScans;
  robot?: TotalUsedForRobotSampleActions;
  strategy?: TimeWaitingForStrategy;
  centring?: TotalWaitingForCentring;
  fault?: TimeTakenWithFaults;
  remaining?: TimeRemaining;
  thinking?: TimeNotUsedByOtherTypes;
}

export abstract class TimeEntrySingletonBase extends SingletonEntity {
  duration?: TotalTime;
  startup?: TimeBeforeFirstDataCollection;
  datacollection?: TimeUsedForDataCollections;
  edge?: TimeUsedForEnergyScans;
  xrf?: TotalUsedForXrfScans;
  robot?: TotalUsedForRobotSampleActions;
  strategy?: TimeWaitingForStrategy;
  centring?: TotalWaitingForCentring;
  fault?: TimeTakenWithFaults;
  remaining?: TimeRemaining;
  thinking?: TimeNotUsedByOtherTypes;
}

export abstract class SessionTimeEntryBase extends Entity {
  duration?: TotalTime1;
  startup?: TimeBeforeFirstDataCollection1;
  datacollection?: TimeUsedForDataCollections1;
  edge?: TimeUsedForEnergyScans1;
  xrf?: TotalUsedForXrfScans1;
  robot?: TotalUsedForRobotSampleActions1;
  strategy?: TimeWaitingForStrategy1;
  centring?: TotalWaitingForCentring1;
  fault?: TimeTakenWithFaults1;
  remaining?: TimeRemaining1;
  thinking?: TimeNotUsedByOtherTypes1;
  sessionId: TheSessionId;
}

export abstract class SessionTimeEntrySingletonBase extends SingletonEntity {
  duration?: TotalTime1;
  startup?: TimeBeforeFirstDataCollection1;
  datacollection?: TimeUsedForDataCollections1;
  edge?: TimeUsedForEnergyScans1;
  xrf?: TotalUsedForXrfScans1;
  robot?: TotalUsedForRobotSampleActions1;
  strategy?: TimeWaitingForStrategy1;
  centring?: TotalWaitingForCentring1;
  fault?: TimeTakenWithFaults1;
  remaining?: TimeRemaining1;
  thinking?: TimeNotUsedByOtherTypes1;
  sessionId: TheSessionId;
}

